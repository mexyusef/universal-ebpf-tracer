name: Universal eBPF Tracer CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Build configuration
  CLANG_VERSION: 14
  LLVM_VERSION: 14
  
jobs:
  # =============================================================================
  # CODE QUALITY AND LINTING
  # =============================================================================
  
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy
        
    - name: Check C code formatting
      run: |
        find src -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror
        
    - name: Lint C code
      run: |
        find src -name "*.c" | xargs clang-tidy --checks='-*,readability-*,performance-*'

  # =============================================================================
  # BUILD AND COMPILATION TESTS
  # =============================================================================
  
  build:
    name: Build eBPF Programs
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        kernel-version: ['5.4', '5.8', '5.15', '6.1']
        clang-version: ['12', '14', '15']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang-${{ matrix.clang-version }} \
          llvm-${{ matrix.clang-version }} \
          libbpf-dev \
          linux-headers-generic \
          build-essential \
          pkg-config
          
    - name: Set up clang
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ matrix.clang-version }} 100
        sudo update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-${{ matrix.clang-version }} 100
        
    - name: Verify system requirements
      run: make check-system
      
    - name: Build all eBPF programs
      run: make all
      
    - name: Verify compiled programs
      run: make verify
      
    - name: Analyze eBPF programs
      run: make analyze
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ebpf-objects-clang${{ matrix.clang-version }}
        path: |
          *.o
          build/
        retention-days: 7

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security:
    name: Security Scanning
    runs-on: ubuntu-22.04
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-14 llvm-14 libbpf-dev linux-headers-generic
        
    - name: Build for security analysis
      run: make all
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # =============================================================================
  # PERFORMANCE TESTING
  # =============================================================================
  
  performance:
    name: Performance Testing
    runs-on: ubuntu-22.04
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-14 llvm-14 libbpf-dev linux-headers-generic
        
    - name: Build eBPF programs
      run: make all
      
    - name: Run performance benchmarks
      run: make benchmark
      
    - name: Check program sizes
      run: |
        echo "eBPF Program Sizes:"
        ls -lh *.o
        echo ""
        echo "Size Analysis:"
        for obj in *.o; do
          size=$(stat -c%s "$obj")
          echo "$obj: $size bytes"
          if [ $size -gt 1048576 ]; then
            echo "WARNING: $obj is larger than 1MB"
          fi
        done

  # =============================================================================
  # COMPATIBILITY TESTING
  # =============================================================================
  
  compatibility:
    name: Kernel Compatibility
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: ['x86_64', 'aarch64']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU for cross-compilation
      if: matrix.arch != 'x86_64'
      uses: docker/setup-qemu-action@v2
      
    - name: Install cross-compilation tools
      if: matrix.arch == 'aarch64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-14 llvm-14 libbpf-dev linux-headers-generic
        
    - name: Build for target architecture
      run: |
        export ARCH=${{ matrix.arch }}
        make all
        
    - name: Verify architecture-specific builds
      run: |
        file *.o
        echo "Build successful for ${{ matrix.arch }}"

  # =============================================================================
  # DOCUMENTATION
  # =============================================================================
  
  documentation:
    name: Documentation
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README and documentation
      run: |
        # Check that README exists and is not empty
        [ -s README.md ] || (echo "README.md is missing or empty" && exit 1)
        
        # Check that CONTRIBUTING.md exists
        [ -s CONTRIBUTING.md ] || (echo "CONTRIBUTING.md is missing" && exit 1)
        
        # Check that LICENSE exists
        [ -s LICENSE ] || (echo "LICENSE is missing" && exit 1)
        
        echo "Documentation check passed"

  # =============================================================================
  # RELEASE
  # =============================================================================
  
  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [lint, build, security, performance, compatibility, documentation]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-14 llvm-14 libbpf-dev linux-headers-generic
        
    - name: Build release artifacts
      run: |
        make clean
        make all
        
    - name: Create release package
      run: |
        mkdir -p release
        cp *.o release/
        cp README.md CONTRIBUTING.md LICENSE release/
        tar -czf universal-ebpf-tracer-${{ github.ref_name }}.tar.gz release/
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Universal eBPF Tracer ${{ github.ref_name }}
        body: |
          ## Universal eBPF Tracer Release ${{ github.ref_name }}
          
          ### Features
          - üåê HTTP Tracer: Application layer protocol tracing
          - ‚ö° XDP Tracer: High-performance network processing
          - üîç Stack Tracer: Deep profiling and stack unwinding
          
          ### Installation
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/universal-ebpf-tracer-${{ github.ref_name }}.tar.gz
          tar -xzf universal-ebpf-tracer-${{ github.ref_name }}.tar.gz
          cd release
          sudo bpftool prog load http_tracer.o /sys/fs/bpf/http_tracer
          ```
          
          ### Requirements
          - Linux kernel 5.4+
          - clang/LLVM 12+
          - libbpf development headers
          - Root privileges for loading eBPF programs
        draft: false
        prerelease: false
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./universal-ebpf-tracer-${{ github.ref_name }}.tar.gz
        asset_name: universal-ebpf-tracer-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
